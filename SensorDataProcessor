import java.io.BufferedWriter; // BufferedWriter import statement 
import java.io.FileWriter; // FileWriter import statement
import java.io.IOException; // IOException import statement 
import java.util.Arrays; // Arrays import statement 

public class SensorDataProcessor {
// Declaring 'data' and 'limit' sensors as 'private final' ensures encapsulation and immutability, protecting the object's state and preventing reassignment.
        private final double[][][] data; 
        private final double[][] limit;

 // change magic numbers to Constants 
    private static final double LOWER_NUMBER = 10.0;
    private static final double UPPER_NUMBER = 50.0;
    

// Rename the constructor name to match the class name 
public SensorDataProcessor(double[][][] data, double[][] limit) {
        this.data = data;
        this.limit = limit;
    }

// Calculates the average of sensor data
private double average(double[] array) {
    double sum = 0;
    for (double value : array) {
        sum += value; // Accumulate the sum of array elements
    }
    return sum / array.length; // Return the average
}

// calculate data
        public void calculate(double division) { //change d to clare name (division)
    // Check for division by zero
    if (division == 0) {
        System.out.println("Error: Division by zero.");
        return;
    }
        double[][][] data2 = new
                double[data.length][data[0].length][data[0][0].length];
       
        // Write racing stats data into a file
            try (BufferedWriter out = new BufferedWriter(new FileWriter("RacingStatsData.txt"))) { // Use try-with-resources
            //ensures that the BufferedWriter is automatically closed after the try block is executed

            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data[0].length; j++) {
                    for (int k = 0; k < data[0][0].length; k++) {
                        data2[i][j][k] = data[i][j][k] / d -
                                Math.pow(limit[i][j], 2.0);
                        if (average(data2[i][j]) > LOWER_NUMBER && average(data2[i][j])
                                < UPPER_NUMBER)
                            break;
                        else if (Math.max(data[i][j][k], data2[i][j][k]) >
                                data[i][j][k])
                            break;
                        else if (Math.pow(Math.abs(data[i][j][k]), 3) <
                                Math.pow(Math.abs(data2[i][j][k]), 3)
                                && average(data[i][j]) < data2[i][j][k] && (i + 1)
                                * (j + 1) > 0)
                            data2[i][j][k] *= 2;
                        else
                            continue;
                    }
                }
            }
            for (int i = 0; i < data2.length; i++) {
                for (int j = 0; j < data2[0].length; j++) {
                    out.write(Arrays.toString(data2[i][j]) + "\t"); // Converts the 1D array to a string format
                }
            }
            out.close();
        } catch (IOException e) { // IOException instead of a generic Exception
            System.out.println("Error= " + e);
        }
    }
}
